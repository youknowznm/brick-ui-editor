/**
 * @file config
 * @author lzheng
 */
let npath = require('path');

let _ = require('lodash');
let moment = require('moment');

let utils = require('./utils');

let config = {
    // 本路径指向业务项目的根目录处
    root: npath.normalize(__dirname + '/../../../../'),

    // 存放所有项目相关的路径
    path: {},

    devPort: 5147,
    prodTestPort: 5148,
    prodPort: 5149,

    forIEDev: false,
    // forIEDev: true,
}

// 源代码类路径
config.path.root = config.root
config.path.src = utils.p(config.root + '/src/')
config.path.projectNodeModules = utils.p(config.root + '/node_modules')
config.path.backend = utils.p(config.path.src + '/backend/')
config.path.frontend = utils.p(config.path.src + '/frontend/')
config.path.befe = utils.p(config.path.src + '/@befe/')
config.path.frontendModules = utils.p(config.path.src)
config.path.backendModules = utils.p(config.path.src + '/backend/node_modules')

// 开发构建相关路径
config.path.dev = utils.p(config.path.src + '/dev/')

// 构建输出路径
config.path.dest = utils.p(config.root + '/dest/')
config.path.dllDev = utils.p(config.path.dest + '/dll-dev/')
config.path.dllProd = utils.p(config.path.dest + '/dll-prod/')
config.path.dev = utils.p(config.path.dest + '/dev/')
config.path.prod = utils.p(config.path.dest + '/prod/')
config.path.prodPages = utils.p(config.path.prod + '/pages/')
config.path.prodDll = utils.p(config.path.prod + '/dll/')
config.path.prodDist = utils.p(config.path.prod + '/dist/')
config.path.prodExtra = utils.p(config.path.prod + '/extra/')

// webpack 构建相关
config.path.devEntries = utils.p(config.path.dest + '/temp-entries/')
config.path.prodEntries = utils.p(config.path.dest + '/prod-entries/')

config.path.webpack = utils.p(config.path.backendModules + '/webpack-config/')
config.path.webpackTemplates = utils.p(config.path.webpack + '/templates/')

// git sub repos / git syncer
config.path.gitSubRepos = utils.p(config.path.root + '/_sub_repos_/')

// 命令行
config.path.commandLines = utils.p(config.path.backend + '/command-line/')

// 功能性路径
config.path.tmp = utils.p(config.path.root + '/tmp/')
config.path.doc = utils.p(config.root + '/doc/')

// 种子工程管理类
config.path.matriks = utils.p(config.root + '/_matriks2_/')
config.path.gitRepos = utils.p(config.path.matriks + '/git-repos/')


/**
 * 为 webpack 提供构建的 entry 注册表
 * 基本上对应的就是所有构建出来的入口 html / js 文件
 *
 * @def: {entryName: entryConfig}
 *  // 对应的会构建出 dest/pages/${entryName}.html
 *  entryName: string
 *
 *  entryConfig: {}
 *      // 到 entry 入口 js 的 path (由 webpack 解析)
 *      entry: string
 *
 *      // 模板路径
 *      template: {dev, prod}
 *          dev: string
 *          prod: string
 *
 *      // 理论上应该叫 turnedOnByDefault
 *      openOnDefault: boolean
 *
 *      // 是否出于打开状态
 *      turnedOn: boolean
 */
config.entries = require('webpack-config/frontend-entries')(config)

// 发布脚本配置位置
config.path.buildPlans = utils.p(config.path.webpack + '/build-plans/')

// bird 配置
config.path.bird = utils.p(config.path.backend + '/bird/')

// backend 服务器
config.path.backendDevServer = utils.p(config.path.backend + '/dev-server/')
config.path.backendServer = utils.p(config.path.backend + '/server/')

// 前端其他
config.path.extraFrontendAsset = utils.p(config.path.frontend + '/extra/')

// 开发环境所用的一些常数
config.CONST = {
    // 用于提供给未打开的 entry 作为其内容使用
    TEMPLATE_NO_ENTRY: '/*DON\'T MODIFY THIS LINE*/document.body.innerHTML = "<h1>该模块尚未打开, 请到 <a href=\'/\'>管理面板 </a>里打开该入口.</h1>"',

    // 指定哪些路径下的资源会被解析为 mobile 端的资源
    MOBILE_CODE_PATH_LIST: [
        npath.resolve(config.path.frontend, 'module/Mobile'),
        npath.resolve(config.path.frontend, 'layout/MobileLayoutVM')
    ],

    BUILD_TIME: moment().format('YYYYMMDDHHmm'),

    // 后端构建时的注入的 context placeholder，常是 @context@
    CONTEXT: '',    // @deprecated
    API_CONTEXT: '',
    WEB_CONTEXT: '',
    I18N_VERSION: '',

    ENTRY_PREFIX: {
        MOBILE: 'mobile-',
        PC: 'pc-',
    },

    ENTRY_TYPE: {
        MOBILE_SIMPLE: 'mobile-simple',
        MOBILE_STANDALONE: 'mobile-standalone',
        MOBILE_HI_APP: 'mobile-hi-app',
        MOBILE_APPROVAL: 'mobile-approval',

        PC_APPROVAL: 'pc-approval',

        // default
        PC_NORMAL: 'pc-normal',
    }
};


// 确保以上提到的文件夹都已创建完毕
for (let pathName in config.path) {
    utils.ensurePath(config.path[pathName])
}

// utils.log(['debug:', config])

module.exports = config;
