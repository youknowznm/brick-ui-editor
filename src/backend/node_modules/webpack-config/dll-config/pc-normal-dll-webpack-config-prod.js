/**
 * @file frontend-entries
 * @author lzheng
 */
var config = require('common/config')
var utils = require('common/utils')
var webpack = require('webpack')
var BundleAnalyzerPlugin = require('webpack-bundle-analyzer')
    .BundleAnalyzerPlugin

var webpackConfig = {
    context: utils.p(config.path.src),
    mode: 'production',
    entry: {
        vendor: [
            'react', 'react-dom', 'superagent', 'classnames', 'react-router',

            'mobx',

            'mobx-react',
            'moment', 'bluebird',
            // 'core-js'
        ]
        // 将 comps 打入 vendor.bundle.js 后 phantom 不运行 vendor.bundle.js， 貌似是预编译失败了
        // 由于本身就会抽取 common.chunk，所以也没必要将 comps 打入 vendor.bundle
        // 暂不考虑，待进一步研究
        // .concat(
        //     compsV2Modules,
        // )
    },

    optimization: {
        minimize: true
    },

    module: {
        rules: require('../get-entry-webpack-config/loader-base/index')({
            isDev:false,
            isDll: true
        })
    },

    output: {
        path: config.path.dllProd,
        filename: '[name].bundle.js',

        // The name of the global variable which the library's
        // require() function will be assigned to
        library: '[name]_lib'
    },

    plugins: [
        new webpack.DefinePlugin({
            '__PRODUCTION__': true,
            '__DEVELOPMENT__': false,
            '__DEVTOOLS__': false
        }),
        new webpack.DllPlugin({
            context: utils.p(config.path.src),

            // The path to the manifest file which maps between
            // modules included in a bundle and the internal IDs
            // within that bundle
            path: utils.p(config.path.dllProd + '/[name]-manifest.json'),

            // The name of the global variable which the library's
            // require function has been assigned to. This must match the
            // output.library option above
            name: '[name]_lib'
        }),
        new webpack.ContextReplacementPlugin(
            /moment[\/\\]locale$/,
            /zh-cn/
        ),
        // 默认关掉 analyzer，因为打包一般情景是 ci，如需本地查看，临时打开注释
        // new BundleAnalyzerPlugin({
        //     analyzerMode: 'static',
        //     reportFilename: 'report_pc_vendor.html'
        // }),
    ]
}

module.exports = webpackConfig
