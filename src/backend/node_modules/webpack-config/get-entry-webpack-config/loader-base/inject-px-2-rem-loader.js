var npath = require('path')
var config = require('common/config')

var mobileCodePath = config.CONST.MOBILE_CODE_PATH_LIST;

// 找到 cssloader 处于数组中的位置
function findCssLoaderIndex(use) {
    return use.findIndex(u => {
        return u.loader === 'css' || u.loader === 'css-loader'
    })
}

// 寻找postcss-loader的索引位置
function findPostCssIndex(use) {
    return use.findIndex(u => {
        return u.loader === 'postcss-loader';
    });
}

/**
 * 将所有的 css 和 less 相关的 loader 配置复制一份,
 * 每一份都为 mobile 模块添加 px2rem 的 loader
 *
 * @def: rules => rules
 *  rules: [rule]
 *      rule: {}
 *          // webpack loader 判断是否使用某个 loader 的测试
 *          test: #@RegExp
 *          exclude: [path]
 *          include: [path]
 *          use: [loader]
 */
function injectPX2RemLoader(rules) {
    var px2LoaderRules = []

    rules.forEach(rule => {
        var stringifyTest = rule.test.toString()
        var use, pos, newRule

        if (stringifyTest.indexOf('less') === -1 && stringifyTest.indexOf('css') === -1) {
            return
        }

        use = rule.use

        if (!Array.isArray(use)) {
            use = [use]
        } else {
            use = use.slice()
        }

        // pos = findCssLoaderIndex(use)
        // 将px2rem-loader的位置调整到post-css后面, 避免post-css将/*no*/等有用的注释删除, 影响px2rem-loader处理
        pos = findPostCssIndex(use);

        newRule = Object.assign({}, rule)
        rule.exclude = rule.exclude ? rule.exclude.concat(mobileCodePath) : mobileCodePath
        newRule.include = newRule.include ? newRule.include.concat(mobileCodePath) : mobileCodePath
        use.splice(pos + 1, 0, {loader: 'px2rem-loader', options: {remUnit: 37.5, remPrecision: 6}})
        newRule.use = use;

        px2LoaderRules.push(newRule)
    });

    return rules.concat(px2LoaderRules)
}

module.exports = injectPX2RemLoader;
