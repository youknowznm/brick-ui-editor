/**
 * @file: loader.base.js
 * @author: Cuttle Cong
 * @date: 2018/1/19
 * @description:
 */
var fs = require('fs')
var npath = require('path')
var config = require('common/config')
var ExtractTextPlugin = require('extract-text-webpack-plugin')
var MiniCssExtractPlugin = require("mini-css-extract-plugin")
var injectPX2RemLoader = require('./inject-px-2-rem-loader')

function getTinyImportPlugins(files) {
    return files.filter(({filename, test}) => {
        return fs.existsSync(filename)
    }).map(({filename, test}) => {
        return [
            'tiny-import',
            {
                test,
                moduleMapper: filename,
                easyModuleMapper: {
                    enable: true,
                    watch: true,
                    basename: true
                }
            }
        ];
    })
}

var babelSettings = {
    cacheDirectory: false,
    extends: npath.join(config.root, '.babelrc'),
    plugins: getTinyImportPlugins(
        [
            { filename: npath.join(config.path.frontend, 'wrapper/erp-pc.js'), test: /^frontend\/wrapper\/erp-pc(\.js)?$/ },
            // 暂不需要，因为彩色 svg icon 没几个
            // { filename: npath.join(config.path.befe, 'erp-comps/v2/components/Icon/icon-svg.js'), test: /^@befe\/erp-comps\/v2\/components\/Icon\/icon-svg(\.js)?$/ },
            // 下面的文件有副作用代码, 所以不 tiny 了
            // { filename: npath.join(config.path.befe, 'utils/dev-pattern-vm/index-pc-normal.js'), test: /^@befe\/utils\/dev-pattern-vm\/index-pc-normal(\.js)?$/ }
        ]
    )
};

const lessLoader = {
    loader: 'less-loader',
    options: {
    }
}

const lessReplaceLoader = {
    loader: require.resolve('../less-replace-loader'),
    options: {
        filePath: npath.join(config.path.frontend, 'style', '_replace.less')
    }
}

var postcssLoader = {
    loader: 'postcss-loader',
    options: {
        ident: 'postcss',
        plugins(/*loader*/) {
            return [
                require('autoprefixer')(),
                require('cssnano')({
                    zindex: false,
                    // https://github.com/ben-eb/cssnano/issues/361
                    reduceIdents: false
                })
            ]
        }
    }
};

const svgLoader = (useSvg, svgPath) => {
    if (useSvg) {
        const include = svgPath.map(path => {
            return config.path.frontend + '/' + svgPath;
        });

        return [{
            test: /\.svg$/,
            include: include,
            use: {
                loader: 'svg-sprite-loader'
            }
        }]
    }
    // svg 与其他图片处理一直
    return [
        {
            test: /\.svg(\?.+)?$/,
            use: {
                loader: 'url-loader',
                options: {
                    limit: 1000,
                    mimetype: 'image/svg+xml'
                }
            }
        }
    ]
};

// @todo:to-refactor 需要把 use svgSymbol 加进来
// module.exports = (isDev = false, useSvgSymbol = false, isDll) => {
module.exports = ({isDev = false, useSvgSymbol = false, isDll, svgPath = []}) => {
    var rules =  [
        // 主体 JS loader
        {
            test: /\.jsx?$/,
            exclude: [
                config.path.projectNodeModules
            ],
            include: [
                config.path.src
            ],
            use: {
                loader: 'babel-loader',
                options: babelSettings
            }
        },

        // 样式类 loader : LESS
        {
            test: /\.less$/,
            exclude: [
                /\.mod\.less/,
                /\.use(able)?\.less$/
            ],
            use: [
                // dll 不抽 css, for erp-comps
                isDev || isDll ? 'style-loader' : MiniCssExtractPlugin.loader,
                {loader: 'css-loader', options: {minimize: !isDev}},
                postcssLoader,
                lessLoader,
                lessReplaceLoader
            ],
        },
        {
            test: /\.use(able)?\.less$/,
            use: [
                { loader: 'style-loader/useable' },
                { loader: 'css-loader', options: { minimize: !isDev } },
                postcssLoader,
                lessLoader,
                lessReplaceLoader
            ]
        },

        // 样式类 loader : CSS
        {
            test: /\.css/,
            exclude: [
                /\.mod\.css$/,
                /\.use(able)?\.css$/
            ],
            use: [
                // dll 不抽 css, for erp-comps
                isDev || isDll ? 'style-loader' : MiniCssExtractPlugin.loader,
                {loader: 'css-loader', options: {minimize: !isDev}},
                postcssLoader
            ]
        },
        {
            test: /\.use(able)?\.css/,
            use: [
                { loader: 'style-loader/useable' },
                { loader: 'css-loader', options: { minimize: !isDev } },
                postcssLoader,
                lessLoader,
                lessReplaceLoader
            ]
        },

        // 图片资源
        {
            test: /\.(jpeg|jpg|png|gif)$/,
            use: {
                loader: 'url-loader',
                options: {
                    limit: 10240
                }
            }
        },

        // Since webpack >= v2.0.0, importing of JSON files will work by default
        // JSON 文件资源
        // {
        //     test: /\.json$/,
        //     use: {
        //         loader: 'json-loader'
        //     }
        // },

        // 字体资源
        {
            test: /\.woff2?(\?.+)?$/,
            use: {
                loader: 'url-loader',
                options: {
                    limit: 10000,
                    mimetype: 'application/font-woff'
                }
            }
        },
        {
            test: /\.ttf(\?.+)?$/,
            use: {
                loader: 'url-loader',
                options: {
                    limit: 10000,
                    mimetype: 'application/octet-stream'
                }
            }
        },
        {
            test: /\.eot(\?.+)?$/,
            use: {
                loader: 'file-loader'
            }
        },

        // SVG 资源
        ...svgLoader(useSvgSymbol, svgPath)
    ];
    return injectPX2RemLoader(rules)
};
