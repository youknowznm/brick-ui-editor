/**
 * @file: webpack.config.js
 * @author: Cuttle Cong
 * @date: 2017/12/4
 * @description:
 */
let npath = require('path')

let _ = require('lodash')
let moment = require('moment')

let webpack = require('webpack')
let MiniCssExtractPlugin = require("mini-css-extract-plugin")
let HtmlWebpackPlugin = require('html-webpack-plugin')
let AddAssetHtmlPlugin = require('add-asset-html-webpack-plugin')
let UglifyJsPlugin = require("uglifyjs-webpack-plugin")
let OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin")

const envConfig = require('webpack-config/env-config')
let utils = require('common/utils')
let config = require('common/config')
let { normalizeIcafeByPkg } = require('normalize-icafe-pkg')

// @todo:refactor
let copyPlugin = require('../plugins/copy')

let getEntryObject = require('./get-entry-object')

const {
      ENTRY_TYPE,
      BUILD_TIME
  } = config.CONST

function isMobile(type) {
    if (type.indexOf('mobile-') === 0) {
        return true
    }
    return false
}

function getFileName(type) {
    if (isMobile(type)) {
        return '[name].bundle.js'
    }

    return '[name].bundle.[hash:6].js'
}

const htmlWebpackPluginOptions = {
    getMinify(isDev) {
        if (isDev) {
            return false
        }

        return {
            removeAttributeQuotes: true,
            collapseWhitespace: true,
            html5: true,
            minifyCSS: true,
            removeComments: true,
            removeEmptyAttributes: true
        }
    },

    getFileName(isDev, entryName) {
        if (isDev) {
            return `pages/${entryName}.html`
        }

        return `../pages/${entryName}.html`
    },

    extendData() {

    }
}

const extractTextPluginOptions = {
    getFileName(type) {
        if (isMobile(type)) {
            return '[name].css'
        }
        return '[name].[chunkhash:6].css'
    }
}

function getDllPlugin(type, isDev, useRouter) {
    let manifestPath
    let libraryPath

    if (isDev) {
        if (isMobile(type)) {
            var vendorName = useRouter
                ? 'mobile_general_vendor'
                : 'mobile_vendor'
            libraryPath = utils.p(config.path.dllDev + '/' + vendorName + '.bundle.js')
            manifestPath = utils.p(config.path.dllDev + '/' + vendorName + '-manifest.json')
        }
        else {
            libraryPath = utils.p(config.path.dllDev + '/vendor.bundle.js')
            manifestPath = utils.p(config.path.dllDev + '/vendor-manifest.json')
        }
    }
    else {
        if (isMobile(type)) {
            var vendorName = useRouter
                ? 'mobile_general_vendor'
                : 'mobile_vendor'
            libraryPath = utils.p(config.path.dllProd + '/' + vendorName + '.bundle.js')
            manifestPath = utils.p(config.path.dllProd + '/' + vendorName + '-manifest.json')
        }
        else {
            libraryPath = utils.p(config.path.dllProd + '/vendor.bundle.js')
            manifestPath = utils.p(config.path.dllProd + '/vendor-manifest.json')
        }
    }

    return {
        plugin: new webpack.DllReferencePlugin({
            context: utils.p(config.path.src),
            manifest: require(manifestPath)
        }),
        manifestPath,
        libraryPath
    }
}

function skipUndefinedAndCheck(list, checkError) {
    const result = list.filter(
        item => typeof item !== 'undefined'
    )

    if (checkError) {
        let errors = []
        result.some(item => {
            errors = checkError(item)
            if (errors.length) {
                return true
            }
        })

        if (errors.length) {
            throw new Error(errors.join('\n'))
        }
    }

    return result
}

function stripUndefinedVal(data) {
    if (data && typeof data === 'object' && !Array.isArray(data)) {
        _.forEach(data, (value, key) => {
            if (typeof value === 'undefined') {
                delete data[key]
            }
        })
    }
    return data
}

function assign(...args) {
    args = skipUndefinedAndCheck(
        args,
        item => {
            if (!item || typeof item !== 'object' || Array.isArray(item)) {
                return ['配置项必须为非空非数组对象']
            }
            return []
        }
    )

    return Object.assign.apply(Object, args)
}

function configAssign() {
    return stripUndefinedVal(assign.apply(this, arguments))
}

function configConcat(source, ...args) {
    args = skipUndefinedAndCheck(
        args,
        item => {
            if (!Array.isArray(item)) {
                return ['配置项不能为非数组类型的内容']
            }
            return []
        }
    )

    return skipUndefinedAndCheck(Array.prototype.concat.apply(source, ...args))

}

module.exports = function (entryOptions) {

    if (!entryOptions) {
        throw new Error(`入口的配置项不应该为空!`)
    }

    if (!entryOptions.entryName) {
        throw new Error('入口的名称项不能为空')
    }

    let {
            // @todo:refactor
            dev: isDev,
            template,
            entryName,
            minify,
            entry: entryPath,

            type = ENTRY_TYPE.PC_NORMAL,
            useRouter,
            useSvgSymbol,
            data = {}
        } = entryOptions

    const icafe = normalizeIcafeByPkg(require(config.path.root + '/package.json'))
    const dll = getDllPlugin(type, isDev, useRouter)

    let webpackEntryConfig = {
        mode: isDev ? 'development' : 'production',
        devtool: isDev ? 'cheap-source-map' : void 0,
        // 入口文件的脚本配置 (dev 下, 加入了 hot reload 的必要脚本)
        entry: getEntryObject({ entryName, entryPath, isDev }),

        // 如果需要在出错第一时间终止编译, 将 bail 设置为 true
        // bail: true,

        // webpack 构建缓存
        cache: true,
        recordsPath: npath.join(config.path.root, 'tmp', entryName + '-records.json'),

        name: entryName,

        context: config.path.root,

        output: {
            path: config.path.prodDist,

            filename: getFileName(type),

            chunkFilename: '[name].chunk.[chunkhash:6].js',

            publicPath: !isDev ? '../dist/' : '/dist/'
        },

        resolve: {
            alias: {
                'ie': 'componentMobile-ie',
                'frontend': utils.p(config.path.src + '/frontend/'),
                '@befe': utils.p(config.path.frontendModules + '/@befe'),

                // 解决 LESS 下模块引用的问题
                '/frontend': utils.p(config.path.src + '/frontend/'),
                '/@befe': utils.p(config.path.frontendModules + '/@befe')
            }
        },

        optimization: {
            splitChunks: {
                name: 'common'
            },

            // @debug 模式下, 可以暂时关闭 uglification
            // minimize: false, // !dev
            minimize: !!minify,

            // for mini-css-extract-plugin
            // While webpack 5 is likely to come with a CSS minimizer built-in, with webpack 4 you need to bring your own
            // https://github.com/webpack-contrib/mini-css-extract-plugin#minimizing-for-production
            minimizer: [
                new UglifyJsPlugin({
                    cache: true,
                    parallel: true,
                    sourceMap: true // set to true if you want JS source maps
                }),
                new OptimizeCSSAssetsPlugin({})
            ]
        },

        plugins: configConcat(
            [
                new webpack.DefinePlugin({
                    '__PRODUCTION__': !isDev,
                    '__DEVELOPMENT__': isDev,
                    '__DEVTOOLS__': isDev
                }),

                new webpack.ProvidePlugin({
                    Promise: 'bluebird'
                }),

                !isDev ? new MiniCssExtractPlugin({
                    // Options similar to the same options in webpackOptions.output
                    // both options are optional
                    filename: isMobile(type)
                        ? '[name].bundle.css'
                        : '[name].bundle.[hash:6].css',
                    chunkFilename: isMobile(type)
                        ? '[name].chunk.css'
                        : '[name].chunk.[hash:6].css',
                }) : undefined,

                new HtmlWebpackPlugin({
                    hash: false,
                    inject: isMobile(type) ? false : true,

                    minify: htmlWebpackPluginOptions
                        .getMinify(isDev),

                    filename: htmlWebpackPluginOptions
                        .getFileName(isDev, entryName),

                    template: template,
                    templateParameters: configAssign({
                            BUILD_TIME,
                            I18N_VERSION: config.CONST.I18N_VERSION,
                            entryName: entryName,
                            CONTEXT: config.CONST.CONTEXT,
                            // 防止 API_CONTEXT 不存在导致报错
                            API_CONTEXT: '',
                            ICAFE_SPACE_ID: icafe && icafe.spaceId ? icafe.spaceId : ''
                        },
                        data,
                        envConfig
                    )
                }),

                dll.plugin,

                isDev ? new webpack.HotModuleReplacementPlugin() : void 0,
                copyPlugin,
                isDev ? new webpack.NamedModulesPlugin()
                      : new webpack.HashedModuleIdsPlugin(),

                new AddAssetHtmlPlugin({
                    filepath: dll.libraryPath,
                    includeSourcemap: false,
                    publicPath: '../dll',
                    outputPath: isDev ? 'dll' : '../dll'
                })
            ]
        ),
        module: {
            rules: configConcat(
                require('./loader-base')({
                    ...entryOptions,
                    isDev,
                    useSvgSymbol
                }),

                [
                    {
                        test: /\.(html|md)$/,
                        exclude: [
                            config.path.webpackTemplates
                        ],
                        use: {
                            loader: 'html-loader'
                        }
                    }
                ]
            )
        }
    }

    // @debug
    utils.inspect(
        'entry config',
        webpackEntryConfig,
        { depth: 4 }
    )

    return webpackEntryConfig
}
